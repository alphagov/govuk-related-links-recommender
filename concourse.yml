groups:
  - name: link-generation
    jobs:
      - run-generation-integration
      - run-generation-staging
      - run-generation-production
  - name: link-ingestion
    jobs:
      - run-ingestion-integration
      - run-ingestion-staging
      - run-ingestion-production
  - name: ci
    jobs:
      - pr
  - name: meta
    jobs:
      - update-pipeline

resource_types:
  - name: cron-resource
    type: docker-image
    source:
      repository: cftoolsmiths/cron-resource
      tag: latest
  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource
      username: ((docker_hub_username))
      password: ((docker_hub_authtoken))

resources:
  - name: every-two-weeks-generation
    type: cron-resource
    source:
      expression: "0 8 9,23 * * *"
      location: "Europe/London"
  - name: every-two-weeks-ingestion
    type: cron-resource
    source:
      expression: "0 8 11,25 * * *"
      location: "Europe/London"
  - name: related-links-pr
    type: pull-request
    source:
      access_token: ((concourse_ci_access_token))
      repository: alphagov/govuk-related-links-recommender
      disable_forks: true
    check_every: 1m
  - name: related-links-recommender-repo
    type: git
    source:
      uri: https://github.com/alphagov/govuk-related-links-recommender.git

jobs:
  - name: update-pipeline
    plan:
      - get: related-links-recommender-repo
        trigger: true
      - set_pipeline: govuk-related-links
        file: related-links-recommender-repo/concourse.yml
  - name: pr
    plan:
      - get: related-links-pr
        trigger: true
        version: every
      - put: related-links-pr
        params:
          path: related-links-pr
          status: pending
      - task: run-python-tests-and-linting
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: python
              tag: 3.7
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          inputs:
            - name: related-links-pr
          run:
            path: bash
            args:
              - -c
              - |
                set -e pipefail

                pip install -r requirements.txt
                flake8 src
                pytest tests/unit
            dir: related-links-pr
      - task: run-ruby-tests
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: 2.6
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          inputs:
            - name: related-links-pr
          run:
            path: bash
            args:
              - -c
              - |
                set -e pipefail

                gem install bundler
                bundle
                rspec spec
            dir: related-links-pr
      - put: related-links-pr
        params:
          path: related-links-pr
          status: success
    on_failure:
      put: related-links-pr
      params:
        path: related-links-pr
        status: failure

  - name: run-generation-integration
    serial_groups:
      - link-generation
    plan:
      - task: create-generation-instance
        config:
          params:
            DESIRED_CAPACITY: 1
            ASG_NAME: related-links-generation
            ROLE_ARN: ((concourse_role_arn_integration))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: &update-asg
            path: bash
            args:
              - -c
              - |
                set -e pipefail
                eval $(aws-assume-role $ROLE_ARN)
                echo Assumed role successfully
                aws autoscaling set-desired-capacity \
                  --auto-scaling-group-name $ASG_NAME \
                  --desired-capacity $DESIRED_CAPACITY \
                  --region eu-west-1
                echo Set desired-capacity
      - task: wait-for-instance
        config:
          params:
            ROLE_ARN: ((concourse_role_arn_integration))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: &wait-for-instance
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail

                eval $(aws-assume-role $ROLE_ARN)
                echo Assumed role successfully

                echo "Sleeping for 30s to give AWS chance to start EC2..."
                sleep 30

                instance_id=$(aws ec2 describe-instances --region eu-west-1 --query "Reservations[*].Instances[*].InstanceId" --filters Name=instance-state-name,Values=running,pending  Name=tag:Name,Values=related-links-generation --output=text)

                echo "Waiting on instance ${instance_id}..."

                aws ec2 wait instance-status-ok \
                  --region eu-west-1 \
                  --instance-ids ${instance_id}

                echo "Instance available and ready"
      - task: provision-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            BIG_QUERY_CREDENTIALS: ((big_query_credentials))
            ROLE_ARN: ((concourse_role_arn_integration))
            CONTENT_STORE_BUCKET: ((content_store_bucket_integration))
            RELATED_LINKS_BUCKET: ((related_links_bucket_integration))
            GIT_BRANCH_TO_CLONE: integration
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: &provision-generation-instance
            path: bash
            args:
              - -c
              - |
                set -eo pipefail

                eval $(aws-assume-role $ROLE_ARN)
                echo Assumed role successfully

                echo "$CONCOURSE_PRIVATE_KEY" > /tmp/concourse_ssh_key
                chmod 400 /tmp/concourse_ssh_key

                instance_ip=$(aws ec2 describe-instances --region eu-west-1 --query "Reservations[*].Instances[*].PublicIpAddress" --filter Name=tag:Name,Values=related-links-generation --output=text)

                echo "Connecting to instance..."
                ssh -i /tmp/concourse_ssh_key -o StrictHostKeyChecking=no ubuntu@${instance_ip} << EOF
                  echo "Connected!"

                  # Setup data directory
                  sudo mkdir /var/data
                  sudo chown -R ubuntu:ubuntu /var/data

                  # Setup Github directory
                  mkdir /var/data/github
                  cd /var/data/github

                  # Clone related links repository
                  git clone --branch "$GIT_BRANCH_TO_CLONE" https://github.com/alphagov/govuk-related-links-recommender.git
                  cd govuk-related-links-recommender

                  # Set execute permission on scripts
                  chmod +x ./provision_generation_machine
                  chmod +x ./run_link_generation

                  # Make bucket names accessible to scripts
                  export CONTENT_STORE_BUCKET="$CONTENT_STORE_BUCKET"
                  export RELATED_LINKS_BUCKET="$RELATED_LINKS_BUCKET"
                  export BIG_QUERY_CREDENTIALS='$BIG_QUERY_CREDENTIALS'

                  # Create log file
                  touch /var/tmp/related_links_process.log

                  echo "Provisioning machine..."
                  ./provision_generation_machine

                  echo "Running link generation in background..."
                  echo "Writing log to /var/tmp/related_links_process.log"
                  ./run_link_generation > /var/tmp/related_links_process.log 2>&1 &
                EOF
      - task: watch-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_integration))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: &watch-instance
            path: bash
            args:
              - -c
              - |
                set -eo pipefail

                eval $(aws-assume-role $ROLE_ARN)
                echo Assumed role successfully

                echo "$CONCOURSE_PRIVATE_KEY" > /tmp/concourse_ssh_key
                chmod 400 /tmp/concourse_ssh_key

                # Update SSH config to keep connection alive
                echo "ServerAliveInterval 300" >> /etc/ssh/ssh_config

                instance_id=$(aws ec2 describe-instances --region eu-west-1 --query "Reservations[*].Instances[*].PublicIpAddress" --filter Name=tag:Name,Values=related-links-generation --output=text)

                echo "Connecting to instance..."
                ssh -i /tmp/concourse_ssh_key -o StrictHostKeyChecking=no ubuntu@${instance_id} <<EOF
                  echo "Connected!"

                  cd /var/data/github/govuk-related-links-recommender

                  chmod +x ./monitor_related_links_process

                  ./monitor_related_links_process
                EOF

  - name: run-generation-staging
    serial_groups:
      - link-generation

    plan:
      - task: create-generation-instance
        config:
          params:
            DESIRED_CAPACITY: 1
            ASG_NAME: related-links-generation
            ROLE_ARN: ((concourse_role_arn_staging))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
      - task: wait-for-instance
        config:
          params:
            ROLE_ARN: ((concourse_role_arn_staging))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *wait-for-instance
      - task: provision-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            BIG_QUERY_CREDENTIALS: ((big_query_credentials))
            ROLE_ARN: ((concourse_role_arn_staging))
            CONTENT_STORE_BUCKET: ((content_store_bucket_staging))
            RELATED_LINKS_BUCKET: ((related_links_bucket_staging))
            GIT_BRANCH_TO_CLONE: master
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *provision-generation-instance
      - task: watch-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_staging))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *watch-instance
      - &destroy-generation-instance-staging
        task: destroy-generation-instance
        config:
          params:
            DESIRED_CAPACITY: 0
            ASG_NAME: related-links-generation
            ROLE_ARN: ((concourse_role_arn_staging))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
    on_failure: *destroy-generation-instance-staging

  - name: run-generation-production
    serial_groups:
      - link-generation

    plan:
      - get: every-two-weeks-generation
        trigger: true
      - task: create-generation-instance
        config:
          params:
            DESIRED_CAPACITY: 1
            ASG_NAME: related-links-generation
            ROLE_ARN: ((concourse_role_arn_production))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
      - task: wait-for-instance
        config:
          params:
            ROLE_ARN: ((concourse_role_arn_production))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *wait-for-instance
      - task: provision-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            BIG_QUERY_CREDENTIALS: ((big_query_credentials))
            ROLE_ARN: ((concourse_role_arn_production))
            CONTENT_STORE_BUCKET: ((content_store_bucket_production))
            RELATED_LINKS_BUCKET: ((related_links_bucket_production))
            GIT_BRANCH_TO_CLONE: master
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *provision-generation-instance
      - task: watch-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_production))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *watch-instance
      - &destroy-generation-instance-production
        task: destroy-generation-instance
        config:
          params:
            DESIRED_CAPACITY: 0
            ASG_NAME: related-links-generation
            ROLE_ARN: ((concourse_role_arn_production))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
    on_failure: *destroy-generation-instance-production

  - name: run-ingestion-integration
    serial_groups:
      - link-ingestion
    plan:
      - task: create-ingestion-instance
        config:
          params:
            DESIRED_CAPACITY: 1
            ASG_NAME: related-links-ingestion
            ROLE_ARN: ((concourse_role_arn_integration))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
      - task: wait-for-instance
        config:
          params:
            ROLE_ARN: ((concourse_role_arn_integration))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: &wait-for-ingestion-instance
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail

                eval $(aws-assume-role $ROLE_ARN)
                echo Assumed role successfully

                echo "Sleeping for 30s to give AWS chance to start EC2..."
                sleep 30

                instance_id=$(aws ec2 describe-instances --region eu-west-1 --query "Reservations[*].Instances[*].InstanceId" --filters Name=instance-state-name,Values=running,pending  Name=tag:Name,Values=related-links-ingestion --output=text)

                echo "Waiting on instance ${instance_id}..."

                aws ec2 wait instance-status-ok \
                  --region eu-west-1 \
                  --instance-ids ${instance_id}

                echo "Instance available and ready"
      - task: provision-ingestion-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_integration))
            PUBLISHING_API_URI: ((publishing_api_uri_integration))
            PUBLISHING_API_BEARER_TOKEN: ((publishing_api_bearer_token_integration))
            RELATED_LINKS_BUCKET: ((related_links_bucket_integration))
            GIT_BRANCH_TO_CLONE: integration
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: &provision-ingestion-instance
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail

                eval $(aws-assume-role $ROLE_ARN)
                echo Assumed role successfully

                echo "$CONCOURSE_PRIVATE_KEY" > /tmp/concourse_ssh_key
                chmod 400 /tmp/concourse_ssh_key

                instance_ip=$(aws ec2 describe-instances --region eu-west-1 --query "Reservations[*].Instances[*].PublicIpAddress" --filter Name=tag:Name,Values=related-links-ingestion --output=text)

                echo "Connecting to instance ${instance_ip}..."
                ssh -i /tmp/concourse_ssh_key -o StrictHostKeyChecking=no ubuntu@${instance_ip} << EOF
                  echo "Connected!"

                  # Setup data directory
                  sudo mkdir /var/data
                  sudo chown -R ubuntu:ubuntu /var/data

                  # Setup Github directory
                  mkdir /var/data/github
                  cd /var/data/github

                  # Clone related links repository
                  git clone --branch "$GIT_BRANCH_TO_CLONE" https://github.com/alphagov/govuk-related-links-recommender.git
                  cd govuk-related-links-recommender

                  # Set execute permission on scripts
                  chmod +x ./provision_ingestion_machine
                  chmod +x ./run_link_ingestion

                  # Make environment variables accessible to scripts
                  export RELATED_LINKS_BUCKET="$RELATED_LINKS_BUCKET"
                  export PUBLISHING_API_URI="$PUBLISHING_API_URI"
                  export PUBLISHING_API_BEARER_TOKEN="$PUBLISHING_API_BEARER_TOKEN"

                  # Create log file
                  touch /var/tmp/related_links_process.log

                  echo "Provisioning machine..."
                  ./provision_ingestion_machine

                  echo "Running link ingestion in background..."
                  echo "Writing log to /var/tmp/related_links_process.log"
                  ./run_link_ingestion > /var/tmp/related_links_process.log 2>&1 &
                EOF
      - task: watch-ingestion-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_integration))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: &watch-ingestion-instance
            path: bash
            args:
              - -c
              - |
                set -ueo pipefail

                eval $(aws-assume-role $ROLE_ARN)
                echo Assumed role successfully

                echo "$CONCOURSE_PRIVATE_KEY" > /tmp/concourse_ssh_key
                chmod 400 /tmp/concourse_ssh_key

                # Update SSH config to keep connection alive
                echo "ServerAliveInterval 300" >> /etc/ssh/ssh_config

                instance_ip=$(aws ec2 describe-instances --region eu-west-1 --query "Reservations[*].Instances[*].PublicIpAddress" --filter Name=tag:Name,Values=related-links-ingestion --output=text)

                echo "Connecting to instance..."
                ssh -i /tmp/concourse_ssh_key -o StrictHostKeyChecking=no ubuntu@${instance_ip} <<EOF
                  echo "Connected!"

                  cd /var/data/github/govuk-related-links-recommender

                  chmod +x ./monitor_related_links_process

                  ./monitor_related_links_process
                EOF

  - name: run-ingestion-staging
    serial_groups:
      - link-ingestion
    plan:
      - task: create-ingestion-instance
        config:
          params:
            DESIRED_CAPACITY: 1
            ASG_NAME: related-links-ingestion
            ROLE_ARN: ((concourse_role_arn_staging))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
      - task: wait-for-instance
        config:
          params:
            ROLE_ARN: ((concourse_role_arn_staging))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *wait-for-ingestion-instance
      - task: provision-ingestion-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_staging))
            PUBLISHING_API_URI: ((publishing_api_uri_staging))
            PUBLISHING_API_BEARER_TOKEN: ((publishing_api_bearer_token_staging))
            RELATED_LINKS_BUCKET: ((related_links_bucket_staging))
            GIT_BRANCH_TO_CLONE: master
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *provision-ingestion-instance
      - task: watch-ingestion-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_staging))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *watch-ingestion-instance
      - &destroy-ingestion-instance-staging
        task: destroy-ingestion-instance
        config:
          params:
            DESIRED_CAPACITY: 0
            ASG_NAME: related-links-ingestion
            ROLE_ARN: ((concourse_role_arn_staging))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
    on_failure: *destroy-ingestion-instance-staging

  - name: run-ingestion-production
    serial_groups:
      - link-ingestion
    plan:
      - get: every-two-weeks-ingestion
        trigger: true
      - task: create-ingestion-instance
        config:
          params:
            DESIRED_CAPACITY: 1
            ASG_NAME: related-links-ingestion
            ROLE_ARN: ((concourse_role_arn_production))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
      - task: wait-for-instance
        config:
          params:
            ROLE_ARN: ((concourse_role_arn_production))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *wait-for-ingestion-instance
      - task: provision-ingestion-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_production))
            PUBLISHING_API_URI: ((publishing_api_uri_production))
            PUBLISHING_API_BEARER_TOKEN: ((publishing_api_bearer_token_production))
            RELATED_LINKS_BUCKET: ((related_links_bucket_production))
            GIT_BRANCH_TO_CLONE: master
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *provision-ingestion-instance
      - task: watch-ingestion-instance
        config:
          params:
            CONCOURSE_PRIVATE_KEY: ((concourse_private_key))
            ROLE_ARN: ((concourse_role_arn_production))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *watch-ingestion-instance
      - &destroy-ingestion-instance-production
        task: destroy-ingestion-instance
        config:
          params:
            DESIRED_CAPACITY: 0
            ASG_NAME: related-links-ingestion
            ROLE_ARN: ((concourse_role_arn_production))
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govsvc/task-toolbox
              tag: 1.1.0
              username: ((docker_hub_username))
              password: ((docker_hub_authtoken))
          run: *update-asg
    on_failure: *destroy-ingestion-instance-production
